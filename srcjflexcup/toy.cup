package it.esercitazione4;

import java.util.ArrayList;
import it.esercitazione4.nodes.*;
import java_cup.runtime.*;

parser code {::}

nonterminal ExprNode Expr;
nonterminal ExprListNode ExprList;
nonterminal IdListNode IdList;
nonterminal CallProcNode CallProc;
nonterminal WriteStatNode WriteStat;
nonterminal AssignStatNode AssignStat;
nonterminal ReadlnStatNode ReadlnStat;
nonterminal TypeDeclNode Type;
nonterminal ResultTypeNode ResultType;
nonterminal ResultTypeListNode ResultTypeList;
nonterminal ParDeclNode ParDecl;
nonterminal IdListInitNode IdListInit;
nonterminal ReturnExprsNode ReturnExprs;
nonterminal VarDeclNode VarDecl;
nonterminal ParamDeclListNode ParamDeclList;
nonterminal VarDeclListNode VarDeclList;
nonterminal IfStatNode IfStat;
nonterminal ElifListNode ElifList;
nonterminal ElifNode Elif;
nonterminal ElseNode Else;
nonterminal WhileStatNode WhileStat;
nonterminal StatListNode StatList;
nonterminal StatNode Stat;
nonterminal ProcNode Proc;
nonterminal ProgramNode Program;
nonterminal ProcListNode ProcList;

terminal SEMI, INT, BOOL, FLOAT, STRING, COMMA, ASSIGN, PROC, LPAR, RPAR, COLON, CORP, VOID, IF, THEN, FI, ELIF, ELSE,
    WHILE, DO, OD, READ, WRITE, TRUE, FALSE, NULL, PLUS, MINUS, TIMES, DIV, AND, OR,
    NOT, GT, GE, NE, LT, LE, EQ, UMINUS, RETURN;

terminal String ID, STRING_CONST;
terminal int INT_CONST;
terminal Double FLOAT_CONST;

precedence left AND, OR;
precedence left GT, GE, NE, LT, LE, EQ;
precedence left NOT;
precedence left PLUS, MINUS;
precedence left TIMES, DIV;
precedence left UMINUS;

Program ::= VarDeclList:vdl ProcList:pl {:RESULT = new ProgramNode(vdl,pl); :}
;

VarDeclList ::=
/* empty */ {: RESULT = null; :}
| VarDecl:vd VarDeclList:vds {: ArrayList<VarDeclNode> new_vds = new ArrayList<>();
                                if(vds != null) {
                                    new_vds.addAll(vds.getVarDeclListNode());
                                }
                                new_vds.add(0, vd);
                                RESULT = new VarDeclListNode(new_vds);
                                :}
;

ProcList ::= Proc:p {: ArrayList<ProcNode> ps = new ArrayList<>();
                     ps.add(p);
                     RESULT = new ProcListNode(ps);
                     :}
	| Proc:p ProcList:ps {: ps.getProcListNode().add(0, p);
                        RESULT = ps;
                      :}
;

VarDecl ::= Type:t IdListInit:i SEMI {: RESULT = new VarDeclNode(t, i);  :}
;

Type ::= INT {: RESULT = new TypeDeclNode(Node.INT_CONST);  :}
        | BOOL {: RESULT = new TypeDeclNode(Node.BOOLEAN_CONST);  :}
        | FLOAT {: RESULT = new TypeDeclNode(Node.FLOAT_CONST);  :}
        | STRING {: RESULT = new TypeDeclNode(Node.STRING_CONST);  :}
;
IdListInit ::= ID:id {: ArrayList<Object> ids = new ArrayList<>();
                        ids.add(new IdLeaf(id));
                        RESULT = new IdListInitNode(ids);
                        :}
    | IdListInit:i COMMA ID:id {:  i.getIdListInitNode().add(new IdLeaf(id));
                                    RESULT = i;
                                :}
    /*int a=5, b, c, d*/
	| ID:id ASSIGN Expr:e {:  ArrayList<Object> ids = new ArrayList<>();
	                          ArrayList<IdLeaf> idLeafs = new ArrayList<>();
	                          ArrayList<ExprNode> exprNodes = new ArrayList<>();
	                          idLeafs.add(new IdLeaf(id));
	                          exprNodes.add(e);
                            ids.add(new AssignStatNode(new IdListNode(idLeafs),new ExprListNode(exprNodes)));
                            RESULT = new IdListInitNode(ids);
                          :}
	/*int a, b=2, c, d*/
	| IdListInit:i COMMA ID:id ASSIGN Expr:e {:   ArrayList<IdLeaf> idLeafs = new ArrayList<>();
                                                ArrayList<ExprNode> exprNodes = new ArrayList<>();
                                                idLeafs.add(new IdLeaf(id));
                                                exprNodes.add(e);
	                                             i.getIdListInitNode().add(new AssignStatNode(new IdListNode(idLeafs),new ExprListNode(exprNodes)));
                                               RESULT = i;
                                           :}
;
Proc ::= PROC ID:id LPAR ParamDeclList:pdl RPAR ResultTypeList:rtl COLON
		VarDeclList:vdl StatList:st RETURN ReturnExprs:re CORP SEMI {:
		RESULT = new ProcNode(new IdLeaf(id), pdl, rtl, vdl, st, re);
		:}
	| PROC ID:id LPAR RPAR ResultTypeList:rtl COLON
		VarDeclList:vdl StatList:st RETURN ReturnExprs:re CORP SEMI {:
        RESULT = new ProcNode( new IdLeaf(id), rtl, vdl, st, re);
        :}
    | PROC ID:id LPAR ParamDeclList:pdl RPAR ResultTypeList:rtl COLON
            VarDeclList:vdl RETURN ReturnExprs:re CORP SEMI {:
             RESULT = new ProcNode(new IdLeaf(id), pdl, rtl, vdl, re);
             :}
    | PROC ID:id LPAR RPAR ResultTypeList:rtl COLON
        VarDeclList:vdl RETURN ReturnExprs:re CORP SEMI {:
            RESULT = new ProcNode(new IdLeaf(id), rtl, vdl, re);
            :}
;
ResultTypeList ::= ResultType:rt {: ArrayList<ResultTypeNode> rts = new ArrayList<>();
                                    rts.add(rt);
                                    RESULT = new ResultTypeListNode(rts);
                                 :}
	| ResultType:rt COMMA ResultTypeList:rts {: rts.getResultTypeListNode().add(0, rt);
	                                            RESULT = rts;
	                                         :}
;
ReturnExprs::=  ExprList:e {: RESULT = new ReturnExprsNode(e);  :}
	| /* empty */ {: RESULT = null; :}
;

ExprList ::= Expr:e {: ArrayList<ExprNode> expressions = new ArrayList<>();
                       expressions.add(e);
                       RESULT = new ExprListNode(expressions); :}
	| Expr:e COMMA ExprList:exprs {: exprs.getExprListNode().add(0, e);
	                                RESULT = exprs;
	                              :}
;

ParamDeclList ::= ParDecl:pd {: ArrayList<ParDeclNode> pds = new ArrayList<>();
                                pds.add(pd);
                                RESULT = new ParamDeclListNode(pds); :}
    | ParamDeclList:pds SEMI ParDecl:pd {: pds.getParamDeclListNode().add(pd);
                                           RESULT = pds;
                                         :}
;

ParDecl ::= Type:t IdList:ids {: RESULT = new ParDeclNode(t, ids); :}
;

IdList ::= ID:id {: IdLeaf idNode = new IdLeaf(id);
                    ArrayList<IdLeaf> ids = new ArrayList<>();
                    ids.add(idNode);
                    RESULT = new IdListNode(ids);
                    :}
    | IdList:ids COMMA ID:id {: IdLeaf idNode = new IdLeaf(id);
                                ids.getIdListNode().add(idNode);
                                RESULT = ids;
                                :}
;

ResultType ::= Type:e {: RESULT = new ResultTypeNode(e);  :}
              | VOID {: RESULT = new ResultTypeNode();   :}
;

StatList ::= Stat:e SEMI  {:         ArrayList<StatNode> stms = new ArrayList<>();
                                     stms.add(e);
                                     RESULT = new StatListNode(stms);
                                     :}

    | Stat:st SEMI StatList:stms {: stms.getStatListNode().add(0, st);
                                    RESULT = stms; :}
;

Stat ::= IfStat:e {: RESULT = (StatNode) e;  :}
	| WhileStat:e {: RESULT = (StatNode) e;  :}
	| ReadlnStat:e {: RESULT = (StatNode) e;  :}
	| WriteStat:e {: RESULT = (StatNode) e;  :}
	| AssignStat:e {: RESULT = (StatNode) e;  :}
	| CallProc:e {: RESULT = (StatNode) e;  :}
;

IfStat ::= IF Expr:e THEN StatList:stms ElifList:els Else:el FI {: RESULT = new IfStatNode(e, stms, els, el); :}
;

ElifList ::= /* empty */ {: RESULT = null; :}
	| Elif:el ElifList:els {: ArrayList<ElifNode> new_els = new ArrayList<>();
                              if(els != null) {
                                  new_els.addAll(els.getElifListNode());
                              }
                              new_els.add(0, el);
                              RESULT = new ElifListNode(new_els);
                              :}
;

Elif ::= ELIF Expr:e THEN StatList:stms {: RESULT = new ElifNode( e, stms); :}
;

Else ::= /* empty */ {: RESULT = null; :}
        | ELSE StatList:stms {: RESULT = new ElseNode(stms); :}
;

WhileStat ::= WHILE StatList:stms1 RETURN Expr:e DO StatList:stms2 OD {: RESULT = new WhileStatNode( stms1, e, stms2); :}
	          | WHILE Expr:e DO StatList:stms OD {: RESULT = new WhileStatNode( e, stms); :}
;

ReadlnStat ::= READ LPAR IdList:ids RPAR {: RESULT = new ReadlnStatNode(ids);  :}
;

WriteStat ::=  WRITE LPAR ExprList:exprs RPAR {: RESULT = new WriteStatNode(exprs); :}
;

AssignStat ::= IdList:ids ASSIGN  ExprList:exprs {: RESULT = new AssignStatNode(ids, exprs); :}
;

CallProc ::= ID:id LPAR ExprList:exprs RPAR {: RESULT = new CallProcNode(new IdLeaf(id), exprs); :}
	         | ID:id LPAR RPAR {: RESULT = new CallProcNode(new IdLeaf(id)); :}
;

  Expr ::= NULL {: RESULT = new ExprNode(Node.NULL_CONST,new NullConstLeaf()); :}
	| TRUE {: RESULT = new ExprNode(Node.TRUE_CONST,new BoolConstLeaf(true)); :}
	| FALSE {: RESULT = new ExprNode(Node.FALSE_CONST,new BoolConstLeaf(false)); :}
	| INT_CONST:e {: RESULT = new ExprNode(Node.INT_CONST,new IntConstLeaf(e)); :}
	| FLOAT_CONST:e {: RESULT = new ExprNode(Node.FLOAT_CONST,new FloatConstLeaf(e)); :}
	| STRING_CONST:e {: RESULT = new ExprNode(Node.STRING_CONST,new StringConstLeaf(e)); :}
	| ID:e {: RESULT = new ExprNode(Node.ID ,new IdLeaf(e)); :}
  | CallProc:e {: RESULT = new ExprNode(Node.CALL_PROC_OP,e);  :}
	| Expr:e1 PLUS Expr:e2 {: RESULT = new ExprNode(Node.ADD_OP,e1,e2); :}
	| Expr:e1 MINUS Expr:e2 {: RESULT = new ExprNode(Node.DIFF_OP,e1,e2); :}
	| Expr:e1 TIMES Expr:e2 {: RESULT = new ExprNode(Node.MUL_OP,e1,e2); :}
	| Expr:e1 DIV Expr:e2 {: RESULT = new ExprNode(Node.DIV_OP,e1,e2); :}
	| Expr:e1 AND Expr:e2 {: RESULT = new ExprNode(Node.AND_OP,e1,e2); :}
	| Expr:e1 OR Expr:e2 {: RESULT = new ExprNode(Node.OR_OP,e1,e2); :}
	| Expr:e1 GT Expr:e2 {: RESULT = new ExprNode(Node.GT_OP,e1,e2); :}
	| Expr:e1 GE Expr:e2 {: RESULT = new ExprNode(Node.GE_OP,e1,e2); :}
	| Expr:e1 LT Expr:e2 {: RESULT = new ExprNode(Node.LT_OP,e1,e2); :}
	| Expr:e1 LE Expr:e2 {: RESULT = new ExprNode(Node.LE_OP,e1,e2); :}
	| Expr:e1 EQ Expr:e2 {: RESULT = new ExprNode(Node.EQ_OP,e1,e2); :}
	| Expr:e1 NE Expr:e2 {: RESULT = new ExprNode(Node.NE_OP,e1,e2);  :}
	| MINUS Expr:e {: RESULT = new ExprNode(Node.UMINUS_OP,e);  :} %prec UMINUS
	| NOT Expr:e {: RESULT = new ExprNode(Node.NOT_OP,e); :}
;
